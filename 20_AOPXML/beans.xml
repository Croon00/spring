<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns='http://www.springframework.org/schema/beans'
	xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
	xmlns:context='http://www.springframework.org/schema/context'
	xmlns:aop='http://www.springframework.org/schema/aop'
	xsi:schemaLocation='http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop.xsd'>
						
						
						
	<bean id='t1' class='com.test.beans.TestBean1'/>
	
	<!-- advisor bean 등록 -->
	<!-- 관심사로 등록된 메서드가 호출되기 전이나 후에 -->
	<!-- 호출될 메서드를 구현한 bean -->
	<bean id='advisor1' class='com.test.advisor.AdvisorClass'/>
	
	<!-- aop 설정 -->
	<aop:config>
		<!-- ref : advisor bean -->
		<aop:aspect ref='advisor1'>
			<!-- point cut : 관심사를 정의한다. -->
			<aop:pointcut id="point1" expression="execution(* method1())"/>
			
			<!-- 메서드 호출 전에 호출될 메서드 등록 -->
			<aop:before method="beforeMethod" pointcut-ref="point1"/>
			<!-- 메서드 호출 후에 호출될 메서드 등록(오류 여부에 관계가 없다) -->
			<aop:after method="afterMethod" pointcut-ref="point1"/>
			<!-- 메서드 호출 전과 후에 동작할 코드를 가지고 있는 메서드 등록 -->
			<aop:around method="aroundMethod" pointcut-ref="point1"/>
			<!-- 메서드 호출 후에 호출되는 메서드 -->
			<!-- 메서드 수행 중 오류가 발생하지 않은 경우 -->
			<aop:after-returning method="afterReturningMethod" pointcut-ref="point1"/>
			<!-- 메서드 호출 후에 호출되는 메서드 -->
			<!-- 메서드 수행 중 오류가 발생했을 경우 -->
			<!-- throwing : 발생된 오류가 관련된 객체를 담을 변수를 지정한다. -->
			<aop:after-throwing method="afterThrowingMethod" pointcut-ref="point1" throwing="e1"/>
			
		</aop:aspect>
	</aop:config>
				
</beans>